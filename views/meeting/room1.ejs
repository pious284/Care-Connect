<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Node-WebRTC App</title>
  <!-- <link rel="stylesheet" href="styles.css"> -->

  <style>
    body {
      font-family: Arial, sans-serif;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      background-color: #f0f0f0;
    }

    #container {
      text-align: center;
      background: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    #join-screen,
    #video-chat {
      margin-top: 20px;
    }

    video {
      width: 300px;
      border: 1px solid #ddd;
      margin: 5px;
    }
  </style>
</head>

<body>
  <div id="container">
    <h1>Node-WebRTC Video Chat</h1>
    <div id="join-screen">
      <input type="text" id="room-name" placeholder="Enter Room Name">
      <button id="join-btn">Join</button>
    </div>
    <div id="video-chat" style="display: none;">
      <video id="local-video" autoplay playsinline></video>
      <div id="remote-videos"></div>
      <button id="leave-btn">Leave</button>
    </div>
  </div>
 <script src="https://cdn.socket.io/4.5.3/socket.io.min.js"></script>

  <!-- <script src="/socket.io/socket.io.js"></script> -->
  <script>
    const socket = io();

    const joinScreen = document.getElementById('join-screen');
    const videoChat = document.getElementById('video-chat');
    const joinBtn = document.getElementById('join-btn');
    const leaveBtn = document.getElementById('leave-btn');
    const roomNameInput = document.getElementById('room-name');
    const localVideo = document.getElementById('local-video');
    const remoteVideos = document.getElementById('remote-videos');
    localVideo.muted = true; // Mute local video to avoid feedback

    let localStream;
    let peerConnections = {};

    joinBtn.addEventListener('click', () => {
      const roomName = roomNameInput.value;
      if (roomName) {
        joinRoom(roomName);
      }
    });

    leaveBtn.addEventListener('click', leaveRoom);

    async function joinRoom(roomName) {
      joinScreen.style.display = 'none';
      videoChat.style.display = 'block';

      localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      localVideo.srcObject = localStream;

      socket.emit('join', roomName);

      socket.on('offer', async (id, description) => {
        const peerConnection = new RTCPeerConnection();
        peerConnections[id] = peerConnection;

        localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

        await peerConnection.setRemoteDescription(new RTCSessionDescription(description));
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);

        socket.emit('answer', id, peerConnection.localDescription);

        peerConnection.ontrack = event => {
          const remoteVideo = document.createElement('video');
          remoteVideo.srcObject = event.streams[0];
          remoteVideo.autoplay = true;
          remoteVideo.playsinline = true;
          remoteVideos.appendChild(remoteVideo);
        };

        peerConnection.onicecandidate = event => {
          if (event.candidate) {
            socket.emit('candidate', id, event.candidate);
          }
        };
      });

      socket.on('answer', async (id, description) => {
        const peerConnection = peerConnections[id];
        await peerConnection.setRemoteDescription(new RTCSessionDescription(description));
      });

      socket.on('candidate', (id, candidate) => {
        const peerConnection = peerConnections[id];
        peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
      });

      socket.on('leave', id => {
        const peerConnection = peerConnections[id];
        peerConnection.close();
        delete peerConnections[id];
      });
    }

    function leaveRoom() {
      for (let id in peerConnections) {
        peerConnections[id].close();
        delete peerConnections[id];
      }
      localStream.getTracks().forEach(track => track.stop());
      joinScreen.style.display = 'block';
      videoChat.style.display = 'none';
      socket.emit('leave');
    }
  </script>
</body>

</html>